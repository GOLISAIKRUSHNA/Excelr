OOPS CONCEPT : 
Object oriented programming 
There are Four basic pillars : 
	1)Encapsulation
	2)Inheritance
	3)polymorphism
	4)Abstraction


1) Encapsulation 
	The process of binding or wrapping the states and behaviour of an object is known as encapsulation
		states : non-static variables
		behaviours : non-static methods
	we can achieve encapsulation with the help of class
	
Advantage of encapsulation is Data hiding.

a) data hiding :
	data hiding is the process of restricting direct access to the data members by providing indirect secure access via methods.
Note : with the help of data hiding we can provide security for our data members.
	The advantage of data hiding is verification and validation

Steps to achieve data hiding :

1) prefixed the data members with private keyword
2) used the getter and setter method to access the data members of another class

Note : 
a) Getter () method is used to get() the data or fetch the data . The return type of getter () should be same as  data types of our member 
	in getter () method return type is important

b) setter() method is used to set the data or modify the data. (formal argument is important)

Private : 

1) in java we can achieve data hiding by using private keyword
2) private is a keyword and it is access modifier
3) if we prefixed data members as private then within the same class we can access private data members directly. but outside of class if we want to access private data members then direct access is restricted
4) if we want to access private data members of another class then create getter() and setter() method



2) Inheritance : 
	a) inheritance comes under is-a relationship
	b) the relationship which is similar to parent-child is known as is-a relationship
	c) in is-a relationship all the properties of parent class will get inherited to child class
	d) inheritances is the process of acquiring properties form of parent class to child class
	e) in java, we can achieve inheritance with the help of "Extends" keyword "implements" keyword
	f) using inheritance we can achieve generalization and specialization
	g) parent class is known as generalized class and
	h) child class is known as specialized class

Note : using parent class reference variable we can access only parent class members but not child class members
using child class reference variable we can access both parent as well as child class members

Terminologies : 
parent class : superclass, base class 
child class : subclass, derived class

Types of inheritance :
1) single level inheritance : 
	if the inheritance is for only one level then such kind of inheritance is known as single level inheritance

2) multi-level inheritance : 
	if the inheritance is of more than one level such king of inheritance is known as multilevel inheritance

3) hierarchical inheritance : 
	if a parent class have more than one child at the same level such type of inheritance is known as hierarchical inheritance

4) multiple inheritance : 
if a child class have more than one parent at the same level then such kind of inheritance is known as multiple inheritance
	
Note : 
	1) in java multiple inheritance cannot be achieved with the help of classes
	2) Assume, their is class A and Class B bothe the classes have same method with same signature
	3) now, class c extends both class A, B if we create object for class c, our compiler will add default no argument constructor inside that very first statement is super call statement
	4) the job of super call statement is to call the constuctour of parent class. here we have two parents A and b 
		so, which class constructor has to be called ? 
			in this case our compiker will get confused to call which parent class constructor. hence, this leads to ambiguity problem ( diamond problem) 

5) Hybrid inheritance :
hybrid inheitance is combination of hierarchical and multiple inheirance

note : hybrid inheritance is also not supported by java for classes . because of diamond problem in multiple inheritance.



****************************************************************************************
super () call statement : 

1) super() is keyword which is used to access the member of parent class
2) super () call statement is used to call the constructor of parent class from child class

purpose of super() call statement ? 
1) to load all the non-static members of a parent class into the object created 
2) with the help of super () call statement we can pass data to the non-static members of parent class by the child class
3) super call() statement is always executed first































































